}
if (length(AHA_ein_list[[i]][["text_data"]][[x]][["text"]])==0 & length(AHA_ein_list[[i]][["text_data"]][[x]][["year"]]!=0)) {
data[nrow(data)+1,] <- c(ein, year, 0)
}
errors_data <- errors_data %>%
rbind(data)
}
}
# Find all ein-years that do not have any text pulled
errors_data <- errors_data %>%
mutate(text_pulled=as.numeric(text_pulled)) %>%
group_by(ein,year) %>%
mutate(sum=sum(text_pulled)) %>%
ungroup() %>%
distinct(ein, year, sum) %>%
filter(sum==0)
View(errors_data)
View(AHA_ein_list)
# read in cleaned data set of names
AHA_ein_list <- readRDS(paste0(created_data_path,"AHA_ein_list.rds"))
View(AHA_ein_list)
# read in cleaned data set of names
AHA_ein_list <- readRDS(paste0(created_data_path,"AHA_ein_list.rds"))
# convert errors in list into data frame
errors_data <- data.frame(ein=as.character(), year=as.character(), text_pulled=as.character())
for (i in seq_along(AHA_ein_list)){
ein <- AHA_ein_list[[i]][["ein"]]
# loop through all elements of text data
for (x in seq_along(AHA_ein_list[[i]][["text_data"]])) {
year <- AHA_ein_list[[i]][["text_data"]][[x]][["year"]]
data <- data.frame(ein=as.character(), year=as.character(), text_pulled=as.character())
if (length(AHA_ein_list[[i]][["text_data"]][[x]][["text"]])>0) {
data <- data.frame(ein=ein, year=year, text_pulled=1)
}
if (length(AHA_ein_list[[i]][["text_data"]][[x]][["text"]])==0 & length(AHA_ein_list[[i]][["text_data"]][[x]][["year"]]!=0)) {
data[nrow(data)+1,] <- c(ein, year, 0)
}
errors_data <- errors_data %>%
rbind(data)
}
}
# Find all ein-years that do not have any text pulled
errors_data <- errors_data %>%
mutate(text_pulled=as.numeric(text_pulled)) %>%
group_by(ein,year) %>%
mutate(sum=sum(text_pulled)) %>%
ungroup() %>%
distinct(ein, year, sum) %>%
filter(sum==0)
write.csv(errors_data, file=paste0(created_data_path, "AHA_errors_data.csv"))
download.file('https://projects.propublica.org/nonprofits/display_990/10130427/2013_08_EO%2F01-0130427_990_201206', destfile = paste0(created_data_path, "testpdf.pdf"),
method="auto", quiet=FALSE, mode="wb")
download.file('https://projects.propublica.org/nonprofits/10130427/2013_08_EO%2F01-0130427_990_201206', destfile = paste0(created_data_path, "testpdf.pdf"),
method="auto", quiet=FALSE, mode="wb")
clean_text <- function(text_data, firstnames_list, lastnames_list, positions_list, titles_list) {
#### clean up string in phrase variable ####
# filter out compensation portion of tax form
text_data <- text_data %>%
filter(row_number()<min(which(str_detect(text_data$phrase, "breakdown of w-2"))))
# remove any digits
text_data$phrase <- str_replace_all(text_data$phrase, "[:digit:]", "")
# remove brackets
text_data$phrase <- str_remove_all(text_data$phrase, '\\[|\\]|\\)|\\(|\\||\\{|\\}|~|=|\\s-\\s|_|—|>|\\.|\\*|,|°|:|\\"|\\”|!|\\?')
# remove any letters that occur by themselves (so that names don't have a middle initial)
text_data$phrase <- str_replace_all(text_data$phrase, "\\b\\w\\b", " ")
text_data$phrase <- str_replace_all(text_data$phrase, "^\\w\\s", "")
# replace "/" with space
text_data$phrase <- str_replace_all(text_data$phrase, "\\/|-|\\\\", " ")
# remove "po box"
text_data$phrase <- str_remove(text_data$phrase, "po box|post")
# remove random two/three letter words
text_data$phrase <- str_remove_all(text_data$phrase, "\\bod\\b|\\bfx\\b|\\biii\\b|\\bfe\\b|\\bxy\\b|\\bea\\b|\\boe\\b|\\bsf\\b|\\btt\\b|\\basa\\b|\\btx\\b|\\bio\\b|\\bpt\\b|\\bxt\\b|\\bsso\\b|\\bsss\\b|\\bxx\\b|\\boo\\b|\\bco\\b|\\biq\\b|\\beo\\b|\\bes\\b|\\bee\\b")
# remove a lot of space with one space
text_data$phrase <- str_replace_all(text_data$phrase, "\\s+", " ")
# create indicator for "dr" and remove it from phrase
text_data <- text_data %>%
mutate(dr=ifelse(str_detect(phrase, "\\bdr\\b"),1,0))
text_data$phrase <- str_remove_all(text_data$phrase, "\\bdr\\b")
# remove space that occurs at the beginning of the string
text_data$phrase <- str_remove(text_data$phrase, "^\\s+")
# next, split phrase up into individual words
text_data <- separate(text_data, phrase, into=c('word1', 'word2', 'word3', 'word4', 'word5'), sep=" ", extra='merge', remove=FALSE)
#### look for first names ####
# create indicator for whether a first name is found
text_data <- text_data %>%
mutate(firstname_word1 = as.integer(rowSums(sapply(firstnames_list, function(name) str_detect(word1, paste0('\\b',name,'\\b')))) > 0),
firstname_word2 = as.integer(rowSums(sapply(firstnames_list, function(name) str_detect(word2, paste0('\\b',name,'\\b')))) > 0),
firstname_word3 = as.integer(rowSums(sapply(firstnames_list, function(name) str_detect(word3, paste0('\\b',name,'\\b')))) > 0),
firstname_word4 = as.integer(rowSums(sapply(firstnames_list, function(name) str_detect(word4, paste0('\\b',name,'\\b')))) > 0))
# figure out which column has the most frequent occurrence of first names
sum_fn_word1 <- sum(text_data$firstname_word1, na.rm=TRUE)
sum_fn_word2 <- sum(text_data$firstname_word2, na.rm=TRUE)
sum_fn_word3 <- sum(text_data$firstname_word3, na.rm=TRUE)
sum_fn_word4 <- sum(text_data$firstname_word4, na.rm=TRUE)
# save the name of the one that occurs most often
int_names <- c("sum_fn_word1", "sum_fn_word2", "sum_fn_word3", "sum_fn_word4")
largest_firstname <- int_names[which.max(c(sum_fn_word1, sum_fn_word2, sum_fn_word3, sum_fn_word4))]
largest_firstname <- str_replace(largest_firstname, "sum_fn", "firstname")
firstname_word <- str_remove(largest_firstname, "firstname_")
# rename indicator variable
text_data <- text_data %>%
rename(max_firstname = largest_firstname)
#### look for last names ####
# create indicator for whether a last name is found
text_data <- text_data %>%
mutate(lastname_word1 = as.integer(rowSums(sapply(lastnames_list, function(name) str_detect(word1, paste0('\\b',name,'\\b')))) > 0),
lastname_word2 = as.integer(rowSums(sapply(lastnames_list, function(name) str_detect(word2, paste0('\\b',name,'\\b')))) > 0),
lastname_word3 = as.integer(rowSums(sapply(lastnames_list, function(name) str_detect(word3, paste0('\\b',name,'\\b')))) > 0),
lastname_word4 = as.integer(rowSums(sapply(lastnames_list, function(name) str_detect(word4, paste0('\\b',name,'\\b')))) > 0))
# figure out which column has the most frequent occurrence of last names
sum_ln_word1 <- sum(text_data$lastname_word1, na.rm=TRUE)
sum_ln_word2 <- sum(text_data$lastname_word2, na.rm=TRUE)
sum_ln_word3 <- sum(text_data$lastname_word3, na.rm=TRUE)
sum_ln_word4 <- sum(text_data$lastname_word4, na.rm=TRUE)
# save the name of the one that occurs most often
int_names <- c("sum_ln_word1", "sum_ln_word2", "sum_ln_word3", "sum_ln_word4")
int_names <- int_names[str_detect(int_names, firstname_word) == FALSE]
if (largest_firstname=="firstname_word1") {largest_lastname <- c("sum_ln_word2", "sum_ln_word3", "sum_ln_word4")[which.max(c(sum_ln_word2, sum_ln_word3, sum_ln_word4))]}
if (largest_firstname=="firstname_word2") {largest_lastname <- c("sum_ln_word1", "sum_ln_word3", "sum_ln_word4")[which.max(c(sum_ln_word1, sum_ln_word3, sum_ln_word4))]}
if (largest_firstname=="firstname_word3") {largest_lastname <- c("sum_ln_word2", "sum_ln_word1", "sum_ln_word4")[which.max(c(sum_ln_word2, sum_ln_word1, sum_ln_word4))]}
if (largest_firstname=="firstname_word4") {largest_lastname <- c("sum_ln_word2", "sum_ln_word3", "sum_ln_word1")[which.max(c(sum_ln_word2, sum_ln_word3, sum_ln_word1))]}
largest_lastname <- str_replace(largest_lastname, "sum_ln", "lastname")
# rename indicator variable
text_data <- text_data %>%
rename(max_lastname = largest_lastname)
# rename variables to reflect names
largest_firstname <- str_replace(largest_firstname, "firstname_", "")
largest_lastname <- str_replace(largest_lastname, "lastname_", "")
text_data <- text_data %>%
rename(first_name=largest_firstname, last_name=largest_lastname)
#### Positions, Titles, and Previous Key Words ####
# Extract positions from phrase
text_data <- text_data %>%
mutate(position = str_extract_all(phrase, paste0('\\b', paste(positions_list, collapse = '|'), '\\b'))) %>%
mutate(position=ifelse(position=="character(0)", NA, position)) %>%
unnest_wider(position, names_sep="")
# only keep observations with either a name or a position
text_data <- text_data %>%
mutate(name_found=as.integer((max_firstname==1 | max_lastname==1) & !str_detect(phrase, "form page|organization|compensation|key employees|section|last day|for bonds|east south")),
group=NA) %>%
mutate(name_found=ifelse(is.na(name_found),0,name_found)) %>%
mutate(position_found=ifelse(is.na(position1),0,1)) %>%
mutate(position_found=ifelse(str_detect(phrase, "form page|organization|compensation|key employees|section"),0,position_found)) %>%
filter(name_found==1 | position_found==1)
if (nrow(text_data)>0){
# extract titles
text_data <- text_data %>%
mutate(title = str_extract(phrase, paste0('\\b', paste(titles_list, collapse = '\\b|\\b'), '\\b'))) %>%
mutate(title=ifelse(dr==1,"dr",title))
# extract words that indicate "former"
text_data <- text_data %>%
mutate(former = str_extract(phrase, paste0('\\b', paste(former_list, collapse = '\\b|\\b'), '\\b')))
# form groups based on rows around names
group = 0
for (row in 1:nrow(text_data)) {
if (text_data$name_found[row] == 1) {group=group+1}
text_data$group[row] <- group
}
# fill positions based on group
text_data <- text_data %>%
group_by(group) %>%
fill(position1, position2, title, former, .direction="downup") %>%
ungroup()
# mutate NAs to blank
text_data <- text_data %>%
mutate(first_name=ifelse(is.na(first_name),"", first_name),
last_name=ifelse(is.na(last_name), "", last_name))
for (j in 1:nrow(text_data)){
if (text_data$name_found[[j]]==1 & text_data$first_name[[j]]!="") {
text_data$phrase[[j]] <- str_remove(text_data$phrase[[j]],text_data$first_name[[j]])
}
if (text_data$name_found[[j]]==1 & text_data$last_name[[j]]!="") {
text_data$phrase[[j]] <- str_remove(text_data$phrase[[j]],text_data$last_name[[j]])
}
if (text_data$position_found[[j]]==1){
text_data$phrase[[j]] <- str_remove(text_data$phrase[[j]],text_data$position1[[j]])
if (!is.na(text_data$position2[[j]])){
text_data$phrase[[j]] <- str_remove(text_data$phrase[[j]],text_data$position2[[j]])
}
}
if (length(text_data$phrase[[j]])>0 & !is.na(text_data$title[[j]])){
text_data$phrase[[j]] <- str_remove(text_data$phrase[[j]],text_data$title[[j]])
}
if (length(text_data$phrase[[j]])>0){
text_data$phrase[[j]] <- str_remove_all(text_data$phrase[[j]],paste0('\\b', paste(former_list, collapse = '|'), '\\b|\\bex\\b|\\bbeg\\b'))
}
}
# remove anyone that doesn't have a position
text_data <- text_data %>%
filter(!is.na(position1))
# rename mistyped physicians
text_data <- text_data %>%
mutate(position1=ifelse(position1=="ohysician","physician",position1),
position1=ifelse(position1=="shysician","physician",position1),
position1=ifelse(position1=='prysician','physician',position1),
position2=ifelse(position2=="shysician","physician",position2),
position2=ifelse(position2=="ohysician","physician",position2),
position2=ifelse(position2=='prysician','physician',position2))
#### Form final data ####
# create "extra" variable that hopefully captures any extra information about the person
text_data$phrase <- str_remove_all(text_data$phrase, "for|related|from|the|beginning|sure")
text_data$phrase <- str_replace(text_data$phrase, "^\\s+", "")
text_data <- text_data %>%
mutate(phrase=ifelse(phrase=="",NA,phrase)) %>%
mutate(extra = phrase) %>%
group_by(group) %>%
fill(extra, .direction="downup") %>%
ungroup() %>%
filter(name_found==1) %>%
select(first_name, last_name, position1, position2, title, former, extra) %>%
distinct()
}
return(text_data)
}
created_data_path = "C:/Users/HKAGELE/Documents/hosp_leadership_created_data/"
# read in AHA_ein_list
AHA_ein_list <- readRDS(paste0(created_data_path,"/AHA_ein_list.rds"))
# create an empty data set to store cleaned text
AHA_ein_data_frame <- data.frame(first_name = character(), last_name=character(), title=character(), position=character())
#### create the other lists as inputs to clean_text() ####
lastnames <- read_excel(paste0(created_data_path, "raw data/app_c.xlsx")) %>%
filter(count>7000) %>%
select(name) %>%
mutate(name=tolower(name))
View(AHA_ein_list)
firstnames <- read_csv(paste0(created_data_path, "raw data/yob2000.txt"), col_names = FALSE) %>%
filter(X3>50) %>%
select(X1) %>%
rename(name=X1) %>%
mutate(name=tolower(name))
lastnames_list <- as.list(lastnames)[["name"]]
lastnames_list <- lastnames_list[lastnames_list != 'person']
firstnames_list <- as.list(firstnames)[["name"]]
positions_list <- c('vice president', 'president', 'vice chairman', 'chairman','vice chair', 'chairperson', 'chair', 'vice-chair', 'physician',
'trustee', 'director', 'board', 'secretary', 'treasurer', 'ceocfo', 'ceo', 'cfo',
'pres', 'division chief', 'vp', 'cpo', 'coo', 'cmo', 'cno',
'system executive',
'ohysician', 'shysician','prysician', 'ex officio', 'executive', 'surgeon', 'anesthesiologist', 'dermatologist',
'medical director',
'chief medical officer', 'chief executive officer', 'chief financial officer', 'chief medical officer')
titles_list <- c('md', 'do', 'rn', 'np')
former_list <- c('previous', 'former', 'ending', 'end', 'past interim', 'past', 'interim')
clean_text <- function(text_data, firstnames_list, lastnames_list, positions_list, titles_list) {
#### clean up string in phrase variable ####
# filter out compensation portion of tax form
text_data <- text_data %>%
filter(row_number()<min(which(str_detect(text_data$phrase, "breakdown of w-2"))))
# remove any digits
text_data$phrase <- str_replace_all(text_data$phrase, "[:digit:]", "")
# remove brackets
text_data$phrase <- str_remove_all(text_data$phrase, '\\[|\\]|\\)|\\(|\\||\\{|\\}|~|=|\\s-\\s|_|—|>|\\.|\\*|,|°|:|\\"|\\”|!|\\?')
# remove any letters that occur by themselves (so that names don't have a middle initial)
text_data$phrase <- str_replace_all(text_data$phrase, "\\b\\w\\b", " ")
text_data$phrase <- str_replace_all(text_data$phrase, "^\\w\\s", "")
# replace "/" with space
text_data$phrase <- str_replace_all(text_data$phrase, "\\/|-|\\\\", " ")
# remove "po box"
text_data$phrase <- str_remove(text_data$phrase, "po box|post")
# remove random two/three letter words
text_data$phrase <- str_remove_all(text_data$phrase, "\\bod\\b|\\bfx\\b|\\biii\\b|\\bfe\\b|\\bxy\\b|\\bea\\b|\\boe\\b|\\bsf\\b|\\btt\\b|\\basa\\b|\\btx\\b|\\bio\\b|\\bpt\\b|\\bxt\\b|\\bsso\\b|\\bsss\\b|\\bxx\\b|\\boo\\b|\\bco\\b|\\biq\\b|\\beo\\b|\\bes\\b|\\bee\\b")
# remove a lot of space with one space
text_data$phrase <- str_replace_all(text_data$phrase, "\\s+", " ")
# create indicator for "dr" and remove it from phrase
text_data <- text_data %>%
mutate(dr=ifelse(str_detect(phrase, "\\bdr\\b"),1,0))
text_data$phrase <- str_remove_all(text_data$phrase, "\\bdr\\b")
# remove space that occurs at the beginning of the string
text_data$phrase <- str_remove(text_data$phrase, "^\\s+")
# next, split phrase up into individual words
text_data <- separate(text_data, phrase, into=c('word1', 'word2', 'word3', 'word4', 'word5'), sep=" ", extra='merge', remove=FALSE)
#### look for first names ####
# create indicator for whether a first name is found
text_data <- text_data %>%
mutate(firstname_word1 = as.integer(rowSums(sapply(firstnames_list, function(name) str_detect(word1, paste0('\\b',name,'\\b')))) > 0),
firstname_word2 = as.integer(rowSums(sapply(firstnames_list, function(name) str_detect(word2, paste0('\\b',name,'\\b')))) > 0),
firstname_word3 = as.integer(rowSums(sapply(firstnames_list, function(name) str_detect(word3, paste0('\\b',name,'\\b')))) > 0),
firstname_word4 = as.integer(rowSums(sapply(firstnames_list, function(name) str_detect(word4, paste0('\\b',name,'\\b')))) > 0))
# figure out which column has the most frequent occurrence of first names
sum_fn_word1 <- sum(text_data$firstname_word1, na.rm=TRUE)
sum_fn_word2 <- sum(text_data$firstname_word2, na.rm=TRUE)
sum_fn_word3 <- sum(text_data$firstname_word3, na.rm=TRUE)
sum_fn_word4 <- sum(text_data$firstname_word4, na.rm=TRUE)
# save the name of the one that occurs most often
int_names <- c("sum_fn_word1", "sum_fn_word2", "sum_fn_word3", "sum_fn_word4")
largest_firstname <- int_names[which.max(c(sum_fn_word1, sum_fn_word2, sum_fn_word3, sum_fn_word4))]
largest_firstname <- str_replace(largest_firstname, "sum_fn", "firstname")
firstname_word <- str_remove(largest_firstname, "firstname_")
# rename indicator variable
text_data <- text_data %>%
rename(max_firstname = largest_firstname)
#### look for last names ####
# create indicator for whether a last name is found
text_data <- text_data %>%
mutate(lastname_word1 = as.integer(rowSums(sapply(lastnames_list, function(name) str_detect(word1, paste0('\\b',name,'\\b')))) > 0),
lastname_word2 = as.integer(rowSums(sapply(lastnames_list, function(name) str_detect(word2, paste0('\\b',name,'\\b')))) > 0),
lastname_word3 = as.integer(rowSums(sapply(lastnames_list, function(name) str_detect(word3, paste0('\\b',name,'\\b')))) > 0),
lastname_word4 = as.integer(rowSums(sapply(lastnames_list, function(name) str_detect(word4, paste0('\\b',name,'\\b')))) > 0))
# figure out which column has the most frequent occurrence of last names
sum_ln_word1 <- sum(text_data$lastname_word1, na.rm=TRUE)
sum_ln_word2 <- sum(text_data$lastname_word2, na.rm=TRUE)
sum_ln_word3 <- sum(text_data$lastname_word3, na.rm=TRUE)
sum_ln_word4 <- sum(text_data$lastname_word4, na.rm=TRUE)
# save the name of the one that occurs most often
int_names <- c("sum_ln_word1", "sum_ln_word2", "sum_ln_word3", "sum_ln_word4")
int_names <- int_names[str_detect(int_names, firstname_word) == FALSE]
if (largest_firstname=="firstname_word1") {largest_lastname <- c("sum_ln_word2", "sum_ln_word3", "sum_ln_word4")[which.max(c(sum_ln_word2, sum_ln_word3, sum_ln_word4))]}
if (largest_firstname=="firstname_word2") {largest_lastname <- c("sum_ln_word1", "sum_ln_word3", "sum_ln_word4")[which.max(c(sum_ln_word1, sum_ln_word3, sum_ln_word4))]}
if (largest_firstname=="firstname_word3") {largest_lastname <- c("sum_ln_word2", "sum_ln_word1", "sum_ln_word4")[which.max(c(sum_ln_word2, sum_ln_word1, sum_ln_word4))]}
if (largest_firstname=="firstname_word4") {largest_lastname <- c("sum_ln_word2", "sum_ln_word3", "sum_ln_word1")[which.max(c(sum_ln_word2, sum_ln_word3, sum_ln_word1))]}
largest_lastname <- str_replace(largest_lastname, "sum_ln", "lastname")
# rename indicator variable
text_data <- text_data %>%
rename(max_lastname = largest_lastname)
# rename variables to reflect names
largest_firstname <- str_replace(largest_firstname, "firstname_", "")
largest_lastname <- str_replace(largest_lastname, "lastname_", "")
text_data <- text_data %>%
rename(first_name=largest_firstname, last_name=largest_lastname)
#### Positions, Titles, and Previous Key Words ####
# Extract positions from phrase
text_data <- text_data %>%
mutate(position = str_extract_all(phrase, paste0('\\b', paste(positions_list, collapse = '|'), '\\b'))) %>%
mutate(position=ifelse(position=="character(0)", NA, position)) %>%
unnest_wider(position, names_sep="")
# only keep observations with either a name or a position
text_data <- text_data %>%
mutate(name_found=as.integer((max_firstname==1 | max_lastname==1) & !str_detect(phrase, "form page|organization|compensation|key employees|section|last day|for bonds|east south")),
group=NA) %>%
mutate(name_found=ifelse(is.na(name_found),0,name_found)) %>%
mutate(position_found=ifelse(is.na(position1),0,1)) %>%
mutate(position_found=ifelse(str_detect(phrase, "form page|organization|compensation|key employees|section"),0,position_found)) %>%
filter(name_found==1 | position_found==1)
if (nrow(text_data)>0){
# extract titles
text_data <- text_data %>%
mutate(title = str_extract(phrase, paste0('\\b', paste(titles_list, collapse = '\\b|\\b'), '\\b'))) %>%
mutate(title=ifelse(dr==1,"dr",title))
# extract words that indicate "former"
text_data <- text_data %>%
mutate(former = str_extract(phrase, paste0('\\b', paste(former_list, collapse = '\\b|\\b'), '\\b')))
# form groups based on rows around names
group = 0
for (row in 1:nrow(text_data)) {
if (text_data$name_found[row] == 1) {group=group+1}
text_data$group[row] <- group
}
# fill positions based on group
text_data <- text_data %>%
group_by(group) %>%
fill(position1, position2, title, former, .direction="downup") %>%
ungroup()
# mutate NAs to blank
text_data <- text_data %>%
mutate(first_name=ifelse(is.na(first_name),"", first_name),
last_name=ifelse(is.na(last_name), "", last_name))
for (j in 1:nrow(text_data)){
if (text_data$name_found[[j]]==1 & text_data$first_name[[j]]!="") {
text_data$phrase[[j]] <- str_remove(text_data$phrase[[j]],text_data$first_name[[j]])
}
if (text_data$name_found[[j]]==1 & text_data$last_name[[j]]!="") {
text_data$phrase[[j]] <- str_remove(text_data$phrase[[j]],text_data$last_name[[j]])
}
if (text_data$position_found[[j]]==1){
text_data$phrase[[j]] <- str_remove(text_data$phrase[[j]],text_data$position1[[j]])
if (!is.na(text_data$position2[[j]])){
text_data$phrase[[j]] <- str_remove(text_data$phrase[[j]],text_data$position2[[j]])
}
}
if (length(text_data$phrase[[j]])>0 & !is.na(text_data$title[[j]])){
text_data$phrase[[j]] <- str_remove(text_data$phrase[[j]],text_data$title[[j]])
}
if (length(text_data$phrase[[j]])>0){
text_data$phrase[[j]] <- str_remove_all(text_data$phrase[[j]],paste0('\\b', paste(former_list, collapse = '|'), '\\b|\\bex\\b|\\bbeg\\b'))
}
}
# remove anyone that doesn't have a position
text_data <- text_data %>%
filter(!is.na(position1))
# rename mistyped physicians
text_data <- text_data %>%
mutate(position1=ifelse(position1=="ohysician","physician",position1),
position1=ifelse(position1=="shysician","physician",position1),
position1=ifelse(position1=='prysician','physician',position1),
position2=ifelse(position2=="shysician","physician",position2),
position2=ifelse(position2=="ohysician","physician",position2),
position2=ifelse(position2=='prysician','physician',position2))
#### Form final data ####
# create "extra" variable that hopefully captures any extra information about the person
text_data$phrase <- str_remove_all(text_data$phrase, "for|related|from|the|beginning|sure")
text_data$phrase <- str_replace(text_data$phrase, "^\\s+", "")
text_data <- text_data %>%
mutate(phrase=ifelse(phrase=="",NA,phrase)) %>%
mutate(extra = phrase) %>%
group_by(group) %>%
fill(extra, .direction="downup") %>%
ungroup() %>%
filter(name_found==1) %>%
select(first_name, last_name, position1, position2, title, former, extra) %>%
distinct()
}
return(text_data)
}
#### loop over list elements and clean data ####
for (i in 1:length(AHA_ein_list)){
ein <- AHA_ein_list[[i]][["ein"]]
for (x in 1:length(AHA_ein_list[[i]][["text_data"]])) {
text <- AHA_ein_list[[i]][["text_data"]][[x]][["text"]]
year <- AHA_ein_list[[i]][["text_data"]][[x]][["year"]]
if (length(text)==0) {text_data=NULL}
if (length(text)>0) {
text_data <- clean_text(text, firstnames_list, lastnames_list, positions_list, titles_list)
text_data <- text_data %>%
mutate(year=year, ein=ein)
}
AHA_ein_data_frame <- rbind(AHA_ein_data_frame, text_data)
#saveRDS(all_ein_data_frame, paste0(created_data_path, "all_ein_data_frame.rds"))
#saveRDS(i, paste0(created_data_path,"current_i.rds"))
}
}
# Further clean text data
AHA_ein_data_frame <- AHA_ein_data_frame %>%
filter(first_name!="" & last_name!="")
View(AHA_ein_data_frame)
hospital_pdf_locations <- read_rds(paste0(created_data_path,"hospital_pdf_locations.rds"))
AHA_eins <- read_rds(paste0(created_data_path,"einlist_AHAmatching_1.rds"))
library(readr)
library(dplyr)
library(cdlTools)
library(stringr)
library(tidyr)
AHA <- read_csv(paste0(created_data_path, "/raw data/AHA_hosp_names.csv"))
AHA <- read_csv(paste0(created_data_path, "/raw data/AHA_hosp_names.csv"))
tax <- readRDS(paste0(created_data_path, "hospital_pdf_locations(sort_name).rds"))
# Get AHA into cleaned data with one row per AHAID ####
# Limit to nonprofit general hospitals
AHA = AHA %>%
filter(FSTCD<=56 & nchar(MLOCZIP)>4 & (CNTRL==23 | (CNTRL>=12 & CNTRL<=16)) & SERV==10) %>%
rename(name.AHA=MNAME) %>%
mutate(name.AHA=tolower(name.AHA)) %>%
mutate(state=fips(FSTCD, to='Abbreviation'))
# Get AHA into cleaned data with one row per AHAID ####
# Limit to nonprofit general hospitals
AHA = AHA %>%
filter(FSTCD<=56 & nchar(MLOCZIP)>4 & (CNTRL==23 | (CNTRL>=12 & CNTRL<=16)) & SERV==10) %>%
rename(name.AHA=MNAME) %>%
mutate(name.AHA=tolower(name.AHA)) %>%
mutate(state=fips(FSTCD, to='Abbreviation'))
# Get AHA into cleaned data with one row per AHAID ####
# Limit to nonprofit general hospitals
AHA = AHA %>%
filter(FSTCD<=56 & nchar(MLOCZIP)>4 & (CNTRL==23 | (CNTRL>=12 & CNTRL<=16)) & SERV==10) %>%
dplyr::rename(name.AHA=MNAME) %>%
mutate(name.AHA=tolower(name.AHA)) %>%
mutate(state=fips(FSTCD, to='Abbreviation'))
# Get AHA into cleaned data with one row per AHAID ####
# Limit to nonprofit general hospitals
AHA = AHA %>%
filter(FSTCD<=56 & nchar(MLOCZIP)>4 & (CNTRL==23 | (CNTRL>=12 & CNTRL<=16)) & SERV==10)
# Get AHA into cleaned data with one row per AHAID ####
# Limit to nonprofit general hospitals
AHA = AHA %>%
filter(FSTCD<=56 & nchar(MLOCZIP)>4 & (CNTRL==23 | (CNTRL>=12 & CNTRL<=16)) & SERV==10) %>%
dplyr::rename(name.AHA=MNAME)
AHA <- read_csv(paste0(created_data_path, "/raw data/AHA_hosp_names.csv"))
# Get AHA into cleaned data with one row per AHAID ####
# Limit to nonprofit general hospitals
AHA = AHA %>%
filter(FSTCD<=56 & nchar(MLOCZIP)>4 & (CNTRL==23 | (CNTRL>=12 & CNTRL<=16)) & SERV==10) %>%
dplyr::rename(name.AHA=MNAME) %>%
mutate(name.AHA=tolower(name.AHA))
# Get AHA into cleaned data with one row per AHAID ####
# Limit to nonprofit general hospitals
AHA = AHA %>%
filter(FSTCD<=56 & nchar(MLOCZIP)>4 & (CNTRL==23 | (CNTRL>=12 & CNTRL<=16)) & SERV==10) %>%
dplyr::rename(name.AHA=MNAME)
View(AHA)
# Get AHA into cleaned data with one row per AHAID ####
# Limit to nonprofit general hospitals
AHA = AHA %>%
filter(FSTCD<=56 & nchar(MLOCZIP)>4 & (CNTRL==23 | (CNTRL>=12 & CNTRL<=16)) & SERV==10) %>%
dplyr::rename(name.AHA=MNAME) %>%
mutate(name.AHA=tolower(`name.AHA`)) %>%
mutate(state=fips(FSTCD, to='Abbreviation'))
AHA <- read_csv(paste0(created_data_path, "/raw data/AHA_hosp_names.csv"))
# Get AHA into cleaned data with one row per AHAID ####
# Limit to nonprofit general hospitals
AHA = AHA %>%
filter(FSTCD<=56 & nchar(MLOCZIP)>4 & (CNTRL==23 | (CNTRL>=12 & CNTRL<=16)) & SERV==10) %>%
dplyr::rename(name.AHA=MNAME) %>%
mutate(name.AHA=tolower(`name.AHA`)) %>%
mutate(state=fips(FSTCD, to='Abbreviation'))
# Get AHA into cleaned data with one row per AHAID ####
# Limit to nonprofit general hospitals
AHA = AHA %>%
filter(FSTCD<=56 & nchar(MLOCZIP)>4 & (CNTRL==23 | (CNTRL>=12 & CNTRL<=16)) & SERV==10) %>%
dplyr::rename(name.AHA=MNAME) %>%
mutate(name.AHA=tolower(as.character(`name.AHA`))) %>%
mutate(state=fips(FSTCD, to='Abbreviation'))
# Get AHA into cleaned data with one row per AHAID ####
# Limit to nonprofit general hospitals
AHA = AHA %>%
filter(FSTCD<=56 & nchar(MLOCZIP)>4 & (CNTRL==23 | (CNTRL>=12 & CNTRL<=16)) & SERV==10) %>%
dplyr::rename(name.AHA=MNAME) %>%
mutate(name.AHA=tolower(enc2utf8(as.character(`name.AHA`)))) %>%
mutate(state=fips(FSTCD, to='Abbreviation'))
# Get AHA into cleaned data with one row per AHAID ####
# Limit to nonprofit general hospitals
AHA = AHA %>%
filter(FSTCD<=56 & nchar(MLOCZIP)>4 & (CNTRL==23 | (CNTRL>=12 & CNTRL<=16)) & SERV==10) %>%
dplyr::rename(name.AHA=MNAME)
hospital_pdf_locations <- readRDS("C:/Users/HKAGELE/Documents/hosp_leadership_created_data/hospital_pdf_locations.rds")
View(hospital_pdf_locations)
